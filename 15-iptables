#!/bin/bash

# This file is part of netfilter-persistent
# (was iptables-persistent)
# Copyright (C) 2009, Simon Richter <sjr@debian.org>
# Copyright (C) 2010, 2014 Jonathan Wiltshire <jmw@debian.org>
# Combining IPv4 and IPv6, and flexible filenames:
# Copyright (C) 2018, Paul Guijt <paul.guijt@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.

# ! The next 8 lines should be put in the /etc/defaults/netfilter-persistent.

RULESv4=/etc/iptables/rules.v4
RULESv6=/etc/iptables/rules.v6

# Rules for IPv4 and IPv6 are saved seperately, because they (mostly) differ when active.
# You can load a rule set for both IPv4 and IPv6, but not save one.
# If you do use a shared rule set, save the rules into RULESv4 and RULESv6
# with '/etc/init.d/netfilter-persistent save' before reboot.

set -e

rc=0

load_rules()
{

	echo "Loading IPTables rules"

	#load IPv4 rules
	if [ ! -f $RULESv4 ]; then
		echo "Warning: skipping IPv4 (no rules to load)"
	else
		/sbin/iptables-restore < $RULESv4 2> /dev/null
		if [ $? -ne 0 ]; then
			rc=1
		fi
	fi

	#load IPv6 rules
        if [ ! -f $RULESv6 ]; then
                echo "Warning: skipping IPv6 (no rules to load)"
        elif [ -f /proc/net/if_inet6 ]; then
                /sbin/ip6tables-restore < $RULESv6 2> /dev/null
                if [ $? -ne 0 ]; then
                        rc=1
                fi
        fi

	 if [ $(/usr/bin/cut -c 3- <<< "$(/sbin/runlevel)") == 5 ]; then
		if  [ -f /etc/init.d/fail2ban ]; then
			/etc/init.d/fail2ban restart
		fi
	fi

}

save_rules()
{
	echo "Saving rules ..."

	#save IPv4 rules
	#need at least iptable_filter loaded:
	/sbin/modprobe -q iptable_filter
	if [ ! -f /proc/net/ip_tables_names ]; then
		echo "Warning: skipping IPv4 (no modules loaded)"
	elif [ -x /sbin/iptables-save ]; then
		touch $RULESv4
		chmod 0640 $RULESv4
		/sbin/iptables-save > $RULESv4
		if [ $? -ne 0 ]; then
			rc=1
		fi
	fi

	#save IPv6 rules
        #need at least iptable_filter loaded:
        /sbin/modprobe -q ip6table_filter
        if [ ! -f /proc/net/ip6_tables_names ]; then
                echo "Warning: skipping IPv6 (no modules loaded)"
        elif [ -x /sbin/ip6tables-save ]; then
                touch $RULESv6
                chmod 0640 $RULESv6
                /sbin/ip6tables-save > $RULESv6
                if [ $? -ne 0 ]; then
                        rc=1
                fi
       fi

}

flush_rules()
{
	if [ ! -f /proc/net/ip_tables_names ]; then
		log_action_cont_msg "Warning: skipping IPv4 (no module loaded)"
	elif [ -x /sbin/iptables ]; then
		for chain in INPUT FORWARD OUTPUT
		do
			/sbin/iptables -P $chain ACCEPT
		done
		for param in F Z X; do /sbin/iptables -$param; done
		for table in $(cat /proc/net/ip_tables_names)
		do
			/sbin/iptables -t $table -F
			/sbin/iptables -t $table -Z
			/sbin/iptables -t $table -X
		done
	fi

	if [ ! -f /proc/net/ip6_tables_names ]; then
                echo "Warning: skipping IPv6 (no module loaded)"
        elif [ -x /sbin/ip6tables ]; then
                for chain in INPUT FORWARD OUTPUT
                do
                        /sbin/ip6tables -P $chain ACCEPT
                done
                for param in F Z X; do /sbin/ip6tables -$param; done
                for table in $(cat /proc/net/ip6_tables_names)
                do
                        /sbin/ip6tables -t $table -F
                        /sbin/ip6tables -t $table -Z
                        /sbin/ip6tables -t $table -X
                done
        fi

}

case "$1" in
start|restart|reload|force-reload)
	load_rules
	;;
save)
	save_rules
	;;
stop)
	# Why? because if stop is used, the firewall gets flushed for a variable
	# amount of time during package upgrades, leaving the machine vulnerable
	# It's also not always desirable to flush during purge
	echo "Automatic flushing disabled, use \"flush\" instead of \"stop\""
	;;
flush)
	flush_rules
	;;
*)
    echo "Usage: $0 {start|restart|reload|force-reload|save|flush}" >&2
    exit 1
    ;;
esac

exit $rc
